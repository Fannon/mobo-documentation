```json
{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "description": "mobo model JSON Schema",
    "definitions": {
        "schemaArray": {
            "type": "array",
            "minItems": 1,
            "items": {
                "$ref": "#"
            }
        },
        "positiveInteger": {
            "type": "integer",
            "minimum": 0
        },
        "positiveIntegerDefault0": {
            "allOf": [
                {
                    "$ref": "#/definitions/positiveInteger"
                },
                {
                    "default": 0
                }
            ]
        },
        "simpleTypes": {
            "enum": [
                "array",
                "boolean",
                "integer",
                "null",
                "number",
                "object",
                "string"
            ]
        },
        "stringArray": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "minItems": 1,
            "uniqueItems": true
        }
    },
    "type": "object",
    "properties": {
        "id": {
            "type": "string",
            "format": null,
            "internal": true,
            "specific": "domain",
            "description": "Usually auto generated ID, identical to the filename.\n"
        },
        "$schema": {
            "type": "string",
            "format": "uri",
            "internal": true
        },
        "title": {
            "type": [
                "string"
            ],
            "specific": "domain",
            "important": true,
            "description": "Human readable title.\n",
            "example": [
                "title: Some title\n"
            ]
        },
        "description": {
            "type": [
                "string"
            ],
            "specific": "domain",
            "important": true,
            "description": "General Description. Fields may use them as tooltips, forms can display a small description box.\nThis depends on the used template.\n",
            "example": [
                "description: |\n  Longer description of the current model part.\n"
            ]
        },
        "default": {
            "appliesNot": [
                "model",
                "form"
            ],
            "description": "The default value. Applies only to fields.\n"
        },
        "maximum": {
            "type": "number",
            "unsupported": true,
            "appliesNot": [
                "model",
                "form"
            ],
            "description": "The maximum value of a number.\n"
        },
        "minimum": {
            "type": "number",
            "unsupported": true,
            "appliesNot": [
                "model",
                "form"
            ],
            "description": "The minimum value of a number.\n"
        },
        "maxLength": {
            "$ref": "#/definitions/positiveInteger",
            "type": "number",
            "unsupported": true,
            "appliesNot": [
                "model",
                "form"
            ],
            "description": "The maximum length of a string.\n"
        },
        "minLength": {
            "$ref": "#/definitions/positiveIntegerDefault0",
            "type": "number",
            "unsupported": true,
            "appliesNot": [
                "model",
                "form"
            ],
            "description": "The minimum length of a string.\n"
        },
        "pattern": {
            "type": "string",
            "format": "regex",
            "unsupported": true,
            "appliesNot": [
                "model",
                "form"
            ],
            "description": "Provides a Regular Expression (Regex) pattern to validate the field value.<br>\nThis is currently not supported by Semantic Forms.\n",
            "example": [
                "pattern: '/^[\\d]{4,5}/$'\n"
            ]
        },
        "items": {
            "anyOf": [
                {
                    "$ref": "#"
                },
                {
                    "$ref": "#/definitions/schemaArray"
                }
            ],
            "default": {},
            "type": [
                "array",
                "object"
            ],
            "important": true,
            "description": "The items property contains an array of all fields that are used by the model.\nFields usually should be implemented using $extend, so every field can have its own file and inheritance.\nIt is possible to overwrite properties from the field directly in the mode.\n",
            "example": [
                "items:\n- $extend: /field/brand\n  title: Overwritten brand title\n- $extend: /field/modelName\n"
            ]
        },
        "maxItems": {
            "$ref": "#/definitions/positiveInteger",
            "type": "number",
            "unsupported": true,
            "appliesNot": [
                "model",
                "form"
            ],
            "description": "How many instances are allowed at most.\n"
        },
        "minItems": {
            "$ref": "#/definitions/positiveIntegerDefault0",
            "type": "number",
            "unsupported": true,
            "appliesNot": [
                "model",
                "form"
            ],
            "description": "How many instances are required at least.\n"
        },
        "required": {
            "$ref": "#/definitions/stringArray",
            "type": [
                "array"
            ],
            "appliesNot": [
                "field",
                "form"
            ],
            "description": "Array containing the IDs of all required fields.\n",
            "example": [
                "required:\n  - fieldA\n  - fieldB\n"
            ]
        },
        "properties": {
            "type": "object",
            "additionalProperties": {
                "$ref": "#"
            },
            "default": {},
            "internal": true,
            "description": "Mobo Schema does not use 'properties', it prefers 'items' since the order of the element must be garantueed.\nInternally, properties are still because of their easier accessing.\n"
        },
        "enum": {
            "type": "array",
            "minItems": 1,
            "uniqueItems": true,
            "appliesNot": [
                "model",
                "form"
            ],
            "description": "List of all possible values.<br>\nDefaults to a dropdown widget.\n",
            "example": [
                "type: string\nenum:\n  - red\n  - green\n  - blue\n"
            ]
        },
        "type": {
            "anyOf": [
                {
                    "$ref": "#/definitions/simpleTypes"
                },
                {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/simpleTypes"
                    },
                    "minItems": 1,
                    "uniqueItems": true
                }
            ],
            "type": [
                "string"
            ],
            "enum": [
                "string",
                "number",
                "boolean",
                "array",
                "object"
            ],
            "important": false,
            "description": "Defines the data-type.\n",
            "example": [
                "type: number\n"
            ]
        },
        "$extend": {
            "type": [
                "array",
                "string"
            ],
            "pattern": "^/.*/_*.*$",
            "uniqueItems": true,
            "important": true,
            "specific": "intermediary",
            "description": "This includes and extends another file of the development.<br>\nInheritance is applied, the children (the current file) overwrites the parent properties.\n",
            "example": [
                "# Inherit a single parent\n$extend: /model/_Shape\n",
                "# Multiple parents are possible\n$extend:\n  - /field/fieldA\n  - /field/fieldB\n",
                "# extend is also used to import fields into models or models into forms.\ntitle: A Model with two fields\nitems:\n  - $extend: /field/fieldA\n  - $extend: /field/fieldB\n"
            ]
        },
        "$remove": {
            "type": [
                "array"
            ],
            "minItems": 1,
            "uniqueItems": true,
            "specific": "intermediary",
            "description": "Array, containing the IDs of all items/properties to remove from current object.\n",
            "example": [
                "$remove:\n  - fieldA\n  - fieldB\n"
            ]
        },
        "$ignore": {
            "type": [
                "boolean"
            ],
            "default": false,
            "specific": "intermediary",
            "description": "If true, this file will be ignored completely.<br>\nUse this to temporarily remove parts of the development model without deleting them.\n",
            "example": [
                "$ignore: true\n"
            ]
        },
        "$abstract": {
            "type": [
                "boolean"
            ],
            "default": false,
            "specific": "intermediary",
            "important": true,
            "description": "If true this object is only used for inheritance and will not be created by itself.\n",
            "example": [
                "$abstract: true\n"
            ]
        },
        "$reference": {
            "type": "object",
            "minItems": 1,
            "uniqueItems": true,
            "internal": true,
            "specific": "metadata",
            "description": "For internal use only!\nAfter inheritance is applied, $extend will be replaced through $reference.\n(For keeping info on the heritage)\n"
        },
        "$path": {
            "type": "string",
            "internal": true,
            "specific": "metadata",
            "description": "For internal use only!\nThis stores the path of the object, as used '$extend' or 'format'.\nUsed for improved debugging messages\n"
        },
        "$filepath": {
            "type": "string",
            "internal": true,
            "specific": "metadata",
            "description": "For internal use only!\nThis stores the complete relative path of the development model file.\nUsed for improved debugging messages\n"
        },
        "$modelPart": {
            "type": "string",
            "internal": true,
            "specific": "metadata",
            "description": "For internal use only!\nThis declares the part from the model where object originated (field, form,...)\n"
        },
        "itemsOrder": {
            "type": [
                "array"
            ],
            "items": {
                "type": "string"
            },
            "minItems": 1,
            "uniqueItems": true,
            "specific": "domain",
            "important": true,
            "description": "In case that fields have been inherited, they might not end up in the correct order.<br>\nThe itemsOrder array lists the order of the fields.\nEvery field that is not listed will be appended at the bottom, in their regular order.\n",
            "example": [
                "itemsOrder:\n  - brand\n  - modelName\n",
                "itemsOrder:\n  - '@unique'\n  - '@sorted'\n  - b\n  - c\n  - a\n  - b\n"
            ]
        },
        "todo": {
            "type": [
                "string"
            ],
            "specific": "domain",
            "description": "If TODO notes are placed here, mobo can print them in the CLI (If the corresponding global setting is enabled).\n"
        },
        "wikitext": {
            "type": "string",
            "internal": true,
            "specific": "metadata",
            "description": "For internal use only! This contains wikitext to inject.\n"
        },
        "format": {
            "type": "string",
            "enum": [
                "date",
                "date-time",
                "url",
                "email",
                "tel",
                "Page",
                "page",
                "Code",
                "code",
                "geographic coordinate",
                "Geographic coordinate",
                "Quantity",
                "quantity",
                "Record",
                "record",
                "Temperature",
                "temperature"
            ],
            "specific": "domain",
            "important": true,
            "appliesNot": [
                "model",
                "form"
            ],
            "description": "Describes the semantic format (how to interpret the type).\nE.g. 'email' or SMW specific datatypes like 'Temperature'\n",
            "example": [
                "type: string\nformat: email\n"
            ]
        },
        "form": {
            "type": [
                "string",
                "array"
            ],
            "specific": "domain",
            "important": true,
            "appliesNot": [
                "model",
                "form"
            ],
            "description": "Defines which form should be automatically used if the red link is clicked.\nIt can link to one multiple forms.<br>\nWhen form it used, it implies: `type: string` and `format: Page`\n",
            "example": [
                "form: formName\n",
                "form:\n  - formName1\n  - formName2\n"
            ]
        },
        "deprecated": {
            "type": "boolean",
            "default": false,
            "specific": "domain",
            "appliesNot": [
                "model",
                "form"
            ],
            "description": "If true, the field will be marked as deprecated.\nIt will not be displayed in forms, but the template will keep it in order to display old entries.\n",
            "example": [
                "deprecated: true\n"
            ]
        },
        "showPage": {
            "type": [
                "boolean"
            ],
            "default": true,
            "specific": "domain",
            "appliesNot": [
                "form"
            ],
            "description": "If true the template/model will be hidden in the page view.\nThis will usually be declared in the forms by adding this after the model $extend.\n",
            "example": [
                "showPage: false\n"
            ]
        },
        "showForm": {
            "type": [
                "boolean"
            ],
            "default": true,
            "specific": "domain",
            "important": true,
            "appliesNot": [
                "form"
            ],
            "description": "If true the template/model will be hidden in the form view.\nThis will usually be declared in the forms by adding this after the model $extend.\n",
            "example": [
                "showForm: false\n"
            ]
        },
        "smw_type": {
            "type": "string",
            "internal": true,
            "appliesNot": [
                "model",
                "form"
            ],
            "description": "The final SMW Type of the field. <br>\nAvoid to set this manually - use the domain specific \"type\" and \"format\" instead, if possible.\n"
        },
        "smw_property": {
            "type": "boolean",
            "default": true,
            "specific": "platform",
            "important": true,
            "appliesNot": [
                "model",
                "form"
            ],
            "description": "If smw_property is set to false the templates won't declare it as a semantic property.\nPlease note that the field can't be queried then.\n",
            "example": [
                "smw_property: false\n"
            ]
        },
        "sf_form": {
            "type": "object",
            "additionalProperties": true,
            "important": true,
            "specific": "platform",
            "appliesNot": [
                "model",
                "form"
            ],
            "description": "The sf_form property is an object that redirects all settings directly to Semantic Forms.<br>\nIf no value is necessary (e.g. \"existing values only\"), use true.\nTo see which options are supported, refer to the Semantic Forms manual.\n",
            "link": "https://www.mediawiki.org/wiki/Extension:Semantic_Forms/Defining_forms#.27field.27_tag",
            "example": [
                "sf_form:\n  input type: combobox\n  values from namespace: Manufacturer\n  max values: 1\n  existing values only: true\n"
            ]
        },
        "smw_overwriteOutput": {
            "type": "string",
            "specific": "implementation",
            "appliesNot": [
                "model",
                "form"
            ],
            "description": "Overwrites the final value of the field, used for both display and data set\n",
            "example": [
                "smw_overwriteOutput: '[[CustomNamespace:{{FULLPAGENAME}}]]'\n",
                "smw_overwriteOutput: '{{FULLPAGENAME}}/subpath/&#123;&#123;&#123;fieldId|}}}'\n"
            ]
        },
        "smw_overwriteOutputToLink": {
            "type": "boolean",
            "specific": "platform",
            "appliesNot": [
                "model",
                "form"
            ],
            "description": "If true, this will create a link in display mode, using #formredlink if applicable.<br>\nThis needs to be used together with `smw_overwriteOutput`.\n",
            "example": [
                "smw_overwriteOutput: 'CustomNamespace:{{FULLPAGENAME}}'\nsmw_overwriteOutputToLink: true\n"
            ]
        },
        "smw_overwriteDisplay": {
            "type": "string",
            "specific": "implementation",
            "appliesNot": [
                "model",
                "form"
            ],
            "description": "Overwrites only the display value of the current field<br>\nIs used similar to `smw_overwriteOutput`.\n"
        },
        "smw_overwriteData": {
            "type": "string",
            "specific": "implementation",
            "appliesNot": [
                "model",
                "form"
            ],
            "description": "Overwrites the final #set or #subobject value of the field.<br>\nIs used similar to `smw_overwriteOutput`\n"
        },
        "smw_appendFormField": {
            "type": "string",
            "specific": "implementation",
            "appliesNot": [
                "model",
                "form"
            ],
            "description": "Adds wikitext after the form input field. This is only displayed when the form is in edit mode.\n",
            "example": [
                "smw_appendFormField: ' [[:Category:Location|...]]'\n"
            ]
        },
        "smw_forceSet": {
            "type": "boolean",
            "default": false,
            "specific": "platform",
            "appliesNot": [
                "model",
                "form"
            ],
            "description": "Forces the semantic storage of the attribute through the #set parser function.<br>\nThis is useful for #subobject models that want to expose one or more fields as regular #set properties.\n",
            "example": [
                "smw_forceSet: true\n"
            ]
        },
        "smw_arraymaptemplate": {
            "type": "string",
            "link": "https://www.mediawiki.org/wiki/Extension:Semantic_Forms/Semantic_Forms_and_templates#arraymaptemplate",
            "default": false,
            "specific": "platform",
            "appliesNot": [
                "model",
                "form"
            ],
            "description": "Name of the arraymap template to use.<br>\nField needs to be of type `array`.\n",
            "example": [
                "smw_arraymaptemplate: ArrayMapRemoveNamespaceTags\n"
            ]
        },
        "smw_drilldown": {
            "type": "boolean",
            "default": false,
            "specific": "platform",
            "appliesNot": [
                "model",
                "form"
            ],
            "description": "If the global settings `smw_semanticDrilldown` is enabled,\nfields with smw_drilldown set to true will be filterable.\n",
            "example": [
                "smw_drilldown: true\n"
            ]
        },
        "recommended": {
            "type": [
                "array"
            ],
            "items": {
                "type": "string"
            },
            "specific": "domain",
            "appliesNot": [
                "form"
            ],
            "description": "Array of fields that should be marked as recommended (complementary to mandatory).<br>\nPlease note that the template and the MediaWiki skin have to support this, since it is not an official feature.\n",
            "example": [
                "recommended:\n  - fieldA\n  - fieldB\n"
            ]
        },
        "smw_subobject": {
            "type": [
                "boolean"
            ],
            "default": false,
            "specific": "platform",
            "appliesNot": [
                "form"
            ],
            "description": "If true, this models attributes will be created as subobjects.<br>\nThis may be appropiate when model is used through multiple instances.<br><br>\nMobo will automantically introduce two additional helper attributes `subobjectType` and `subobjectParent` that help with querying subobjects.\n",
            "example": [
                "smw_subobject: true\n"
            ]
        },
        "smw_subobjectExtend": {
            "type": [
                "object"
            ],
            "specific": "platform",
            "appliesNot": [
                "form"
            ],
            "description": "Contains a set (object) of additional #subobject properties.\n",
            "example": [
                "smw_subobjectExtend:\n  additionalSubObjProp2: 'Some fixed text'\n  additionalSubObjProp3: '{{FULLPAGENAME}}/subpath/&#123;&#123;&#123;fieldId|}}}'\n"
            ]
        },
        "smw_display": {
            "type": [
                "string"
            ],
            "default": "table",
            "specific": "platform",
            "appliesNot": [
                "form"
            ],
            "description": "Defines the template output rendering mode, whether the template should use tables, ul, etc.<br>\nThe rendering mode must be available in  /mobo_template/template.wikitext!\n",
            "example": [
                "smw_display: ul\n"
            ]
        },
        "smw_prepend": {
            "type": [
                "object",
                "string"
            ],
            "properties": {
                "wikitext": {
                    "type": [
                        "string"
                    ],
                    "description": "wikitext to prepend"
                },
                "header": {
                    "type": [
                        "number"
                    ],
                    "description": "Inserts auto generated header of given hierachy (1-6)",
                    "minimum": 1,
                    "maximum": 6
                },
                "template": {
                    "type": [
                        "string"
                    ],
                    "description": "name of a template to inject. Must exist"
                }
            },
            "additionalProperties": false,
            "specific": "implementation",
            "appliesNot": [
                "form"
            ],
            "description": "Prepends wikitext to both forms and templates.\nCan either be a string or an object for more advanced features (auto-generate headers, inject templates\nor add arbitrary wikitext).\n",
            "example": [
                "smw_prepend:\n  header: 1\n  wikitext: |\n    Some prepended wikitext\n    Will be inserted after the H1 header\n",
                "smw_prepend: 'Some prepended wikitext'\n"
            ]
        },
        "smw_prependForm": {
            "type": [
                "object",
                "string"
            ],
            "properties": {
                "wikitext": {
                    "type": [
                        "string"
                    ],
                    "description": "wikitext to prepend"
                },
                "header": {
                    "type": [
                        "number"
                    ],
                    "description": "Inserts auto generated header of given hierachy (1-6)",
                    "minimum": 1,
                    "maximum": 6
                },
                "template": {
                    "type": [
                        "array",
                        "string"
                    ],
                    "description": "name of a template to inject. Must exist"
                }
            },
            "additionalProperties": false,
            "specific": "implementation",
            "appliesNot": [
                "form"
            ],
            "description": "Prepends wikitext only to forms (edit-view). Can either be a string\nor an object for more advanced features (auto-generate headers, inject templates\nor add arbitrary wikitext)\n"
        },
        "smw_prependPage": {
            "type": [
                "object",
                "string"
            ],
            "properties": {
                "wikitext": {
                    "type": [
                        "string"
                    ],
                    "description": "wikitext to prepend"
                },
                "header": {
                    "type": [
                        "number"
                    ],
                    "description": "Inserts auto generated header of given hierachy (1-6)",
                    "minimum": 1,
                    "maximum": 6
                },
                "template": {
                    "type": [
                        "array",
                        "string"
                    ],
                    "description": "name of a template to inject. Must exist"
                }
            },
            "additionalProperties": false,
            "specific": "implementation",
            "appliesNot": [
                "form"
            ],
            "description": "Prepends wikitext only to templates (page-view). Can either be a\nstring or an object for more advanced features (auto-generate headers, inject\ntemplates or add arbitrary wikitext)\n"
        },
        "smw_prependCategory": {
            "type": [
                "string"
            ],
            "specific": "implementation",
            "appliesNot": [
                "form"
            ],
            "description": "Wikitext to prepend on the category page\n",
            "example": [
                "smw_prependCategory: |\n  Some wikitext to prepend on the category page\n"
            ]
        },
        "smw_append": {
            "type": [
                "object",
                "string"
            ],
            "properties": {
                "wikitext": {
                    "type": [
                        "string"
                    ],
                    "description": "Wikitext to append."
                },
                "template": {
                    "type": [
                        "string"
                    ],
                    "description": "Name of the template to inject."
                }
            },
            "additionalProperties": false,
            "specific": "implementation",
            "appliesNot": [
                "form"
            ],
            "description": "Adds a append wikitext to forms and models.\n",
            "example": [
                "smw_append: |\n  Some appended wikitext\n  Will be inserted after the H1 header\n"
            ]
        },
        "smw_appendForm": {
            "type": [
                "object",
                "string"
            ],
            "properties": {
                "wikitext": {
                    "type": [
                        "string"
                    ],
                    "description": "wikitext to prepend"
                },
                "template": {
                    "type": [
                        "array",
                        "string"
                    ],
                    "description": "name of a template to inject. Must exist"
                }
            },
            "additionalProperties": false,
            "specific": "implementation",
            "appliesNot": [
                "form"
            ],
            "description": "Appends wikitext only to forms (edit-view).\nCan either be a string or an object for more advanced features.\n(auto-generate headers, inject templates or add arbitrary wikitext)\n"
        },
        "smw_appendPage": {
            "type": [
                "object",
                "string"
            ],
            "properties": {
                "wikitext": {
                    "type": [
                        "string"
                    ],
                    "description": "wikitext to prepend"
                },
                "template": {
                    "type": [
                        "array",
                        "string"
                    ],
                    "description": "name of a template to inject. Must exist"
                }
            },
            "additionalProperties": false,
            "specific": "implementation",
            "appliesNot": [
                "form"
            ],
            "description": "Appends wikitext only to templates (page-view). Can either be a\nstring or an object for more advanced features (auto-generate headers, inject\ntemplates or add arbitrary wikitext)\n"
        },
        "smw_appendCategory": {
            "type": [
                "string"
            ],
            "specific": "implementation",
            "appliesNot": [
                "form"
            ],
            "description": "Wikitext to append on the category page\n",
            "example": [
                "smw_appendCategory: |\n  Some wikitext to append on the category page\n"
            ]
        },
        "smw_category": {
            "type": [
                "boolean"
            ],
            "default": true,
            "specific": "platform",
            "appliesNot": [
                "form"
            ],
            "description": "If true, the models template will assign a category.\nThe name of the category is the model ID.\n",
            "example": [
                "smw_category: false\n"
            ]
        },
        "smw_categories": {
            "type": [
                "array"
            ],
            "items": {
                "type": "string"
            },
            "specific": "platform",
            "appliesNot": [
                "form"
            ],
            "description": "Array of additional categories the template should set.\n",
            "example": [
                "smw_categories:\n  - additionalCategoryA\n  - additionalCategoryB\n"
            ]
        }
    },
    "default": {},
    "title": "Mobo Fields"
}
```