```json
{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "description": "Core schema meta-schema",
    "definitions": {
        "schemaArray": {
            "type": "array",
            "minItems": 1,
            "items": {
                "$ref": "#"
            }
        },
        "positiveInteger": {
            "type": "integer",
            "minimum": 0
        },
        "positiveIntegerDefault0": {
            "allOf": [
                {
                    "$ref": "#/definitions/positiveInteger"
                },
                {
                    "default": 0
                }
            ]
        },
        "simpleTypes": {
            "enum": [
                "array",
                "boolean",
                "integer",
                "null",
                "number",
                "object",
                "string"
            ]
        },
        "stringArray": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "minItems": 1,
            "uniqueItems": true
        }
    },
    "type": "object",
    "properties": {
        "id": {
            "type": "string",
            "format": null,
            "description": "Usually auto generated id, consisting of the filename",
            "internal": true,
            "specific": "domain"
        },
        "$schema": {
            "type": "string",
            "format": "uri",
            "internal": true
        },
        "title": {
            "type": [
                "string"
            ],
            "description": "Human readable title of the field",
            "specific": "domain"
        },
        "description": {
            "type": [
                "string"
            ],
            "description": "Description of the field. Can be displayed as tooltip info",
            "specific": "domain"
        },
        "default": {
            "type": []
        },
        "maximum": {
            "type": [
                "number"
            ]
        },
        "minimum": {
            "type": [
                "number"
            ]
        },
        "maxLength": {
            "$ref": "#/definitions/positiveInteger",
            "type": []
        },
        "minLength": {
            "$ref": "#/definitions/positiveIntegerDefault0",
            "type": []
        },
        "pattern": {
            "type": [
                "string"
            ],
            "format": "regex"
        },
        "items": {
            "anyOf": [
                {
                    "$ref": "#"
                },
                {
                    "$ref": "#/definitions/schemaArray"
                }
            ],
            "default": {},
            "type": []
        },
        "maxItems": {
            "$ref": "#/definitions/positiveInteger",
            "type": []
        },
        "minItems": {
            "$ref": "#/definitions/positiveIntegerDefault0",
            "type": []
        },
        "required": {
            "$ref": "#/definitions/stringArray",
            "type": []
        },
        "properties": {
            "type": "object",
            "additionalProperties": {
                "$ref": "#"
            },
            "default": {},
            "description": "Mobo Schema does not use 'properties', it prefers 'items' because the order of the element can be garantueed. Internally, properties are still used because of their easier accessing.",
            "internal": true
        },
        "enum": {
            "type": [
                "array"
            ],
            "minItems": 1,
            "uniqueItems": true
        },
        "type": {
            "anyOf": [
                {
                    "$ref": "#/definitions/simpleTypes"
                },
                {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/simpleTypes"
                    },
                    "minItems": 1,
                    "uniqueItems": true
                }
            ],
            "type": []
        },
        "format": {
            "description": "Describe the semantic format, how to interpret the type. E.g. 'email' or SMW specific datatypes like 'Temperature'",
            "enum": [
                "date",
                "date-time",
                "url",
                "email",
                "tel",
                "Page",
                "page",
                "Code",
                "code",
                "geographic coordinate",
                "Geographic coordinate",
                "Quantity",
                "quantity",
                "Record",
                "record",
                "Temperature",
                "temperature"
            ],
            "specific": "domain",
            "type": []
        },
        "$meta": {
            "type": "object",
            "description": "Internal metadata",
            "internal": true,
            "specific": "metadata"
        },
        "$extend": {
            "type": [
                "array",
                "string"
            ],
            "description": "This references another mobo json file. It will be included through inheritance, all existing attributes in the parent object will be overwritten.",
            "pattern": "^/.*/_*.*$",
            "uniqueItems": true
        },
        "$remove": {
            "type": [
                "array"
            ],
            "description": "Array, containing the IDs of all items/properties to remove from the current object.",
            "minItems": 1,
            "uniqueItems": true
        },
        "$reference": {
            "type": "object",
            "description": "For internal use only! After inheritance is applied, $extend will be replaced through reference. (For keeping info on the heritage)",
            "minItems": 1,
            "uniqueItems": true,
            "internal": true,
            "specific": "metadata"
        },
        "$path": {
            "type": "string",
            "description": "For internal use only! This stores the path of the object, as used in '$extend' or 'format'. Used for improved debugging messages",
            "internal": true,
            "specific": "metadata"
        },
        "$filepath": {
            "type": "string",
            "description": "For internal use only! This stores the complete relative path of the .json file. Used for improved debugging messages",
            "internal": true,
            "specific": "metadata"
        },
        "$modelPart": {
            "type": "string",
            "description": "For internal use only! This declares the part from the model where the object originated (field, form,...)",
            "internal": true,
            "specific": "metadata"
        },
        "wikitext": {
            "type": "string",
            "description": "For internal use only! This contains wikitext to inject",
            "internal": true,
            "specific": "metadata"
        },
        "$ignore": {
            "type": [
                "boolean"
            ],
            "description": "If true this file will be ignored.",
            "default": false,
            "specific": "domain"
        },
        "$abstract": {
            "type": [
                "boolean"
            ],
            "default": false,
            "description": "If true this object is only used for inheritance and will not be created itself.",
            "specific": "domain"
        },
        "itemsOrder": {
            "type": [
                "array"
            ],
            "items": {
                "type": "string"
            },
            "description": "Array that sets the display order of all (including inherited) properties. Unmentioned fields will be appended at the bottom in their original order.",
            "minItems": 1,
            "uniqueItems": true,
            "specific": "domain"
        },
        "todo": {
            "type": [
                "string"
            ],
            "description": "If todo notes are placed here, mobo can output them (this is a setting)",
            "specific": "domain"
        },
        "note": {
            "type": [
                "object",
                "string"
            ],
            "description": "Notes can be strings or objects and their content will be ignored",
            "specific": "domain"
        }
    },
    "default": {},
    "additionalProperties": false
}
```