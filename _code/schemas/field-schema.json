```json
{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "description": "Core schema meta-schema",
    "definitions": {
        "schemaArray": {
            "type": "array",
            "minItems": 1,
            "items": {
                "$ref": "#"
            }
        },
        "positiveInteger": {
            "type": "integer",
            "minimum": 0
        },
        "positiveIntegerDefault0": {
            "allOf": [
                {
                    "$ref": "#/definitions/positiveInteger"
                },
                {
                    "default": 0
                }
            ]
        },
        "simpleTypes": {
            "enum": [
                "array",
                "boolean",
                "integer",
                "null",
                "number",
                "object",
                "string"
            ]
        },
        "stringArray": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "minItems": 1,
            "uniqueItems": true
        }
    },
    "type": "object",
    "properties": {
        "id": {
            "type": "string",
            "format": null,
            "internal": true,
            "specific": "domain",
            "description": "Usually auto generated ID, should be identical to the filename\n"
        },
        "$schema": {
            "type": "string",
            "format": "uri",
            "internal": true
        },
        "title": {
            "type": [
                "string"
            ],
            "specific": "domain",
            "important": true,
            "description": "Human readable title.\n"
        },
        "description": {
            "type": [
                "string"
            ],
            "specific": "domain",
            "important": true,
            "description": "Description of the field. Can be displayed as tooltip info\n"
        },
        "default": {
            "appliesNot": [
                "model",
                "form"
            ],
            "description": "The default value of the field.\n",
            "type": []
        },
        "maximum": {
            "type": [
                "number"
            ],
            "unsupported": true,
            "appliesNot": [
                "model",
                "form"
            ],
            "description": "The maximum value of a number\n"
        },
        "minimum": {
            "type": [
                "number"
            ],
            "unsupported": true,
            "appliesNot": [
                "model",
                "form"
            ],
            "description": "The minimum value of a number\n"
        },
        "maxLength": {
            "$ref": "#/definitions/positiveInteger",
            "type": [
                "number"
            ],
            "unsupported": true,
            "appliesNot": [
                "model",
                "form"
            ],
            "description": "The maximum length of a string\n"
        },
        "minLength": {
            "$ref": "#/definitions/positiveIntegerDefault0",
            "type": [
                "number"
            ],
            "unsupported": true,
            "appliesNot": [
                "model",
                "form"
            ],
            "description": "The minimum length of a string\n"
        },
        "pattern": {
            "type": [
                "string"
            ],
            "format": "regex",
            "unsupported": true,
            "appliesNot": [
                "model",
                "form"
            ],
            "description": "Regular Expression (Regex) pattern<br>\nThis is currently not supported by Semantic Forms.\n"
        },
        "items": {
            "anyOf": [
                {
                    "$ref": "#"
                },
                {
                    "$ref": "#/definitions/schemaArray"
                }
            ],
            "default": {},
            "type": [
                "array",
                "object"
            ],
            "important": true,
            "description": "Some fields have multiple values (e.g. comma seperated).<br>\nIn this case the items property needs to be used.<br>\nThe items object then defines the actual data type, format and form\n",
            "example": [
                "title: Tags\nitems:\n  type: string\n"
            ]
        },
        "maxItems": {
            "$ref": "#/definitions/positiveInteger",
            "type": [
                "number"
            ],
            "unsupported": true,
            "appliesNot": [
                "model",
                "form"
            ],
            "description": "How many instances are allowed at most.\n"
        },
        "minItems": {
            "$ref": "#/definitions/positiveIntegerDefault0",
            "type": [
                "number"
            ],
            "unsupported": true,
            "appliesNot": [
                "model",
                "form"
            ],
            "description": "How many instances are required at least.\n"
        },
        "required": {
            "$ref": "#/definitions/stringArray",
            "appliesNot": [
                "field",
                "form"
            ],
            "description": "Array containing the IDs of all required fields\n"
        },
        "properties": {
            "type": "object",
            "additionalProperties": {
                "$ref": "#"
            },
            "default": {},
            "internal": true,
            "description": "Mobo Schema does not use 'properties', it prefers 'items' because the order of the element can be garantueed.\nInternally, properties are still because of their easier accessing.\n"
        },
        "enum": {
            "type": [
                "array"
            ],
            "minItems": 1,
            "uniqueItems": true,
            "appliesNot": [
                "model",
                "form"
            ],
            "description": "List of all possible values.<br>\nDefaults to a dropdown widget.\n",
            "example": [
                "type: string\nenum:\n  - red\n  - green\n  - blue\n"
            ]
        },
        "type": {
            "anyOf": [
                {
                    "$ref": "#/definitions/simpleTypes"
                },
                {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/simpleTypes"
                    },
                    "minItems": 1,
                    "uniqueItems": true
                }
            ],
            "type": [
                "string"
            ],
            "enum": [
                "string",
                "number",
                "boolean",
                "array",
                "object"
            ],
            "important": true,
            "description": "Defines the data-type.\n"
        },
        "$extend": {
            "type": [
                "array",
                "string"
            ],
            "pattern": "^/.*/_*.*$",
            "uniqueItems": true,
            "important": true,
            "specific": "intermediary",
            "description": "This references another mobo json file.\nIt will be included through inheritance, all existing attributes in the parent object will be overwritten.\n"
        },
        "$remove": {
            "type": [
                "array"
            ],
            "minItems": 1,
            "uniqueItems": true,
            "specific": "intermediary",
            "description": "Array, containing the IDs of all items/properties to remove from current object.\n"
        },
        "$ignore": {
            "type": [
                "boolean"
            ],
            "default": false,
            "specific": "intermediary",
            "description": "If true, this file will be ignored completely.\n"
        },
        "$abstract": {
            "type": [
                "boolean"
            ],
            "default": false,
            "specific": "intermediary",
            "important": true,
            "description": "If true this object is only used for inheritance and will not be itself.\n"
        },
        "$reference": {
            "type": "object",
            "minItems": 1,
            "uniqueItems": true,
            "internal": true,
            "specific": "metadata",
            "description": "For internal use only!\nAfter inheritance is applied, $extend will be replaced through $reference.\n(For keeping info on the heritage)\n"
        },
        "$path": {
            "type": "string",
            "internal": true,
            "specific": "metadata",
            "description": "For internal use only!\nThis stores the path of the object, as used '$extend' or 'format'.\nUsed for improved debugging messages\n"
        },
        "$filepath": {
            "type": "string",
            "internal": true,
            "specific": "metadata",
            "description": "For internal use only!\nThis stores the complete relative path of the development model file.\nUsed for improved debugging messages\n"
        },
        "$modelPart": {
            "type": "string",
            "internal": true,
            "specific": "metadata",
            "description": "For internal use only!\nThis declares the part from the model where object originated (field, form,...)\n"
        },
        "itemsOrder": {
            "type": [
                "array"
            ],
            "items": {
                "type": "string"
            },
            "minItems": 1,
            "uniqueItems": true,
            "specific": "domain",
            "important": true,
            "description": "In case that fields have been inherited, they might not end up in the correct order.\nThe itemsOrder array lists the order of the fields.\nEvery field that is not listed will be appended at the bottom, in their regular order.\n",
            "example": [
                "itemsOrder:\n  - brand\n  - modelName\n"
            ]
        },
        "todo": {
            "type": [
                "string"
            ],
            "specific": "domain",
            "description": "If TODO notes are placed here, mobo can print them in the CLI (If the corresponding global setting is enabled)\n"
        },
        "wikitext": {
            "type": "string",
            "internal": true,
            "specific": "metadata",
            "description": "For internal use only! This contains wikitext to inject\n"
        },
        "format": {
            "type": [
                "string"
            ],
            "enum": [
                "date",
                "date-time",
                "url",
                "email",
                "tel",
                "Page",
                "page",
                "Code",
                "code",
                "geographic coordinate",
                "Geographic coordinate",
                "Quantity",
                "quantity",
                "Record",
                "record",
                "Temperature",
                "temperature"
            ],
            "specific": "domain",
            "important": true,
            "appliesNot": [
                "model",
                "form"
            ],
            "description": "Describes the semantic format (how to interpret the type).\nE.g. 'email' or SMW specific datatypes like 'Temperature'\n"
        },
        "form": {
            "type": [
                "array",
                "string"
            ],
            "specific": "domain",
            "important": true,
            "appliesNot": [
                "model",
                "form"
            ],
            "description": "Defines which form should be automatically used if the red link is clicked.\nIt can link to one multiple forms.<br>\nIt sets implicitly: `type: string`  and `format: Page`\n",
            "example": [
                "form: formName\n",
                "form:\n  - formName1\n  - formName2\n"
            ]
        },
        "deprecated": {
            "type": [
                "boolean"
            ],
            "default": false,
            "specific": "domain",
            "appliesNot": [
                "model",
                "form"
            ],
            "description": "If true, the field will be deprecated. This means it will not be\ndisplayed in forms, but the template will keep it in order to display old entries.\n"
        },
        "showPage": {
            "type": [
                "boolean"
            ],
            "default": true,
            "specific": "domain",
            "appliesNot": [
                "form"
            ],
            "description": "Whether to display this element in the page view."
        },
        "showForm": {
            "type": [
                "boolean"
            ],
            "default": true,
            "specific": "domain",
            "important": true,
            "appliesNot": [
                "form"
            ],
            "description": "Whether to display this element in the form-edit view."
        },
        "smw_type": {
            "type": "string",
            "internal": true,
            "appliesNot": [
                "model",
                "form"
            ],
            "description": "The final SMW Type of the field. Please avoid to set this manually - use \"type\" and \"format\" instead.\n"
        },
        "smw_property": {
            "type": [
                "boolean"
            ],
            "default": true,
            "specific": "platform",
            "important": true,
            "appliesNot": [
                "model",
                "form"
            ],
            "description": "If smw_property is set to false the templates won't declare it as a semantic property.\nPlease note that the field can't be queried then.\n"
        },
        "sf_form": {
            "type": [
                "object"
            ],
            "additionalProperties": true,
            "important": true,
            "specific": "platform",
            "appliesNot": [
                "model",
                "form"
            ],
            "description": "The sf_form property is an object that redirects all settings directly to Semantic Forms.\nIf no value is necessary (e.g. \"existing values only\"), use true.\nTo see which options are supported, refer to the Semantic Forms manual\n",
            "link": "https://www.mediawiki.org/wiki/Extension:Semantic_Forms/Defining_forms#.27field.27_tag",
            "example": [
                "sf_form:\n  input type: combobox\n  values from namespace: Manufacturer\n  max values: 1\n  existing values only: true\n"
            ]
        },
        "smw_overwriteOutput": {
            "type": [
                "string"
            ],
            "specific": "implementation",
            "appliesNot": [
                "model",
                "form"
            ],
            "description": "Overwrites the final value of the field, used for both display and data set\n"
        },
        "smw_overwriteOutputToLink": {
            "type": [
                "boolean"
            ],
            "specific": "platform",
            "appliesNot": [
                "model",
                "form"
            ],
            "description": "If true, this will create a link in display mode, using #formredlink if applicable\n"
        },
        "smw_overwriteDisplay": {
            "type": [
                "string"
            ],
            "specific": "implementation",
            "appliesNot": [
                "model",
                "form"
            ],
            "description": "Overwrites only the display value of the current field\n"
        },
        "smw_overwriteData": {
            "type": [
                "string"
            ],
            "specific": "implementation",
            "appliesNot": [
                "model",
                "form"
            ],
            "description": "Overwrites the final #set or #subobject value of the field. This\nwill also overwrite smw_overwriteOutput.\n"
        },
        "smw_forceSet": {
            "type": [
                "boolean"
            ],
            "default": false,
            "specific": "platform",
            "appliesNot": [
                "model",
                "form"
            ],
            "description": "Forces the semantic storage of the attribute through the #set parser function.\nThis is useful for #subobject models that want to expose one or more fields as regular #set properties.\n"
        },
        "smw_arraymaptemplate": {
            "type": [
                "string"
            ],
            "link": "https://www.mediawiki.org/wiki/Extension:Semantic_Forms/Semantic_Forms_and_templates#arraymaptemplate",
            "default": false,
            "specific": "platform",
            "appliesNot": [
                "model",
                "form"
            ],
            "description": "Name of the arraymap template to use. Field needs to be of type `array`.\n"
        },
        "smw_drilldown": {
            "type": [
                "boolean"
            ],
            "default": false,
            "specific": "platform",
            "appliesNot": [
                "model",
                "form"
            ],
            "description": "If the global settings `smw_semanticDrilldown` is enabled, fields\nwith smw_drilldown set to true will be filterable.\n"
        }
    },
    "default": {},
    "title": "Mobo Fields"
}
```